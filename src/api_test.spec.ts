/**
 * Nomad
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.1.4
 * Contact: support@hashicorp.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("ACLApi", () => {
  let instance: api.ACLApi
  beforeEach(function() {
    instance = new api.ACLApi(config)
  });

  test("deleteACLPolicy", () => {
    const policyName: string = "policyName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.deleteACLPolicy(policyName, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("deleteACLToken", () => {
    const tokenAccessor: string = "tokenAccessor_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.deleteACLToken(tokenAccessor, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("getACLPolicies", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getACLPolicies(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getACLPolicy", () => {
    const policyName: string = "policyName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getACLPolicy(policyName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getACLToken", () => {
    const tokenAccessor: string = "tokenAccessor_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getACLToken(tokenAccessor, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getACLTokenSelf", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getACLTokenSelf(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getACLTokens", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getACLTokens(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postACLBootstrap", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postACLBootstrap(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postACLPolicy", () => {
    const body: api.ACLPolicy = undefined
    const policyName: string = "policyName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postACLPolicy(body, policyName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postACLToken", () => {
    const body: api.ACLToken = undefined
    const tokenAccessor: string = "tokenAccessor_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postACLToken(body, tokenAccessor, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postACLTokenOnetime", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postACLTokenOnetime(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postACLTokenOnetimeExchange", () => {
    const body: api.OneTimeTokenExchangeRequest = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postACLTokenOnetimeExchange(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("AllocationsApi", () => {
  let instance: api.AllocationsApi
  beforeEach(function() {
    instance = new api.AllocationsApi(config)
  });

  test("getAllocation", () => {
    const allocID: string = "allocID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getAllocation(allocID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getAllocationServices", () => {
    const allocID: string = "allocID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getAllocationServices(allocID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getAllocations", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const resources: boolean = true
    const taskStates: boolean = true
    return expect(instance.getAllocations(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, resources, taskStates, {})).resolves.toBe(null)
  })
  test("postAllocationStop", () => {
    const allocID: string = "allocID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const noShutdownDelay: boolean = true
    return expect(instance.postAllocationStop(allocID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, noShutdownDelay, {})).resolves.toBe(null)
  })
})

describe("DeploymentsApi", () => {
  let instance: api.DeploymentsApi
  beforeEach(function() {
    instance = new api.DeploymentsApi(config)
  });

  test("getDeployment", () => {
    const deploymentID: string = "deploymentID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getDeployment(deploymentID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getDeploymentAllocations", () => {
    const deploymentID: string = "deploymentID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getDeploymentAllocations(deploymentID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getDeployments", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getDeployments(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postDeploymentAllocationHealth", () => {
    const body: api.DeploymentAllocHealthRequest = undefined
    const deploymentID: string = "deploymentID_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postDeploymentAllocationHealth(body, deploymentID, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postDeploymentFail", () => {
    const deploymentID: string = "deploymentID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postDeploymentFail(deploymentID, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postDeploymentPause", () => {
    const body: api.DeploymentPauseRequest = undefined
    const deploymentID: string = "deploymentID_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postDeploymentPause(body, deploymentID, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postDeploymentPromote", () => {
    const body: api.DeploymentPromoteRequest = undefined
    const deploymentID: string = "deploymentID_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postDeploymentPromote(body, deploymentID, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postDeploymentUnblock", () => {
    const body: api.DeploymentUnblockRequest = undefined
    const deploymentID: string = "deploymentID_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postDeploymentUnblock(body, deploymentID, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("EnterpriseApi", () => {
  let instance: api.EnterpriseApi
  beforeEach(function() {
    instance = new api.EnterpriseApi(config)
  });

  test("createQuotaSpec", () => {
    const body: api.QuotaSpec = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.createQuotaSpec(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("deleteQuotaSpec", () => {
    const specName: string = "specName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.deleteQuotaSpec(specName, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("getQuotaSpec", () => {
    const specName: string = "specName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getQuotaSpec(specName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getQuotas", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getQuotas(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postQuotaSpec", () => {
    const body: api.QuotaSpec = undefined
    const specName: string = "specName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postQuotaSpec(body, specName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("EvaluationsApi", () => {
  let instance: api.EvaluationsApi
  beforeEach(function() {
    instance = new api.EvaluationsApi(config)
  });

  test("getEvaluation", () => {
    const evalID: string = "evalID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getEvaluation(evalID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getEvaluationAllocations", () => {
    const evalID: string = "evalID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getEvaluationAllocations(evalID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getEvaluations", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getEvaluations(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("JobsApi", () => {
  let instance: api.JobsApi
  beforeEach(function() {
    instance = new api.JobsApi(config)
  });

  test("deleteJob", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const purge: boolean = true
    const global: boolean = true
    return expect(instance.deleteJob(jobName, region, namespace, xNomadToken, idempotencyToken, purge, global, {})).resolves.toBe(null)
  })
  test("getJob", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJob(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getJobAllocations", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const all: boolean = true
    return expect(instance.getJobAllocations(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, {})).resolves.toBe(null)
  })
  test("getJobDeployment", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJobDeployment(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getJobDeployments", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const all: number = 56
    return expect(instance.getJobDeployments(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, all, {})).resolves.toBe(null)
  })
  test("getJobEvaluations", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJobEvaluations(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getJobScaleStatus", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJobScaleStatus(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getJobSummary", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJobSummary(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getJobVersions", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const diffs: boolean = true
    return expect(instance.getJobVersions(jobName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, diffs, {})).resolves.toBe(null)
  })
  test("getJobs", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getJobs(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postJob", () => {
    const body: api.JobRegisterRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJob(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobDispatch", () => {
    const body: api.JobDispatchRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobDispatch(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobEvaluate", () => {
    const body: api.JobEvaluateRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobEvaluate(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobParse", () => {
    const body: api.JobsParseRequest = undefined
    return expect(instance.postJobParse(body, {})).resolves.toBe(null)
  })
  test("postJobPeriodicForce", () => {
    const jobName: string = "jobName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobPeriodicForce(jobName, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobPlan", () => {
    const body: api.JobPlanRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobPlan(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobRevert", () => {
    const body: api.JobRevertRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobRevert(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobScalingRequest", () => {
    const body: api.ScalingRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobScalingRequest(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobStability", () => {
    const body: api.JobStabilityRequest = undefined
    const jobName: string = "jobName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobStability(body, jobName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postJobValidateRequest", () => {
    const body: api.JobValidateRequest = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postJobValidateRequest(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("registerJob", () => {
    const body: api.JobRegisterRequest = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.registerJob(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("MetricsApi", () => {
  let instance: api.MetricsApi
  beforeEach(function() {
    instance = new api.MetricsApi(config)
  });

  test("getMetricsSummary", () => {
    const format: string = "format_example"
    return expect(instance.getMetricsSummary(format, {})).resolves.toBe(null)
  })
})

describe("NamespacesApi", () => {
  let instance: api.NamespacesApi
  beforeEach(function() {
    instance = new api.NamespacesApi(config)
  });

  test("createNamespace", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.createNamespace(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("deleteNamespace", () => {
    const namespaceName: string = "namespaceName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.deleteNamespace(namespaceName, region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("getNamespace", () => {
    const namespaceName: string = "namespaceName_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getNamespace(namespaceName, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getNamespaces", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getNamespaces(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postNamespace", () => {
    const body: api.Namespace = undefined
    const namespaceName: string = "namespaceName_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postNamespace(body, namespaceName, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("NodesApi", () => {
  let instance: api.NodesApi
  beforeEach(function() {
    instance = new api.NodesApi(config)
  });

  test("getNode", () => {
    const nodeId: string = "nodeId_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getNode(nodeId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getNodeAllocations", () => {
    const nodeId: string = "nodeId_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getNodeAllocations(nodeId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getNodes", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const resources: boolean = true
    return expect(instance.getNodes(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, resources, {})).resolves.toBe(null)
  })
  test("updateNodeDrain", () => {
    const body: api.NodeUpdateDrainRequest = undefined
    const nodeId: string = "nodeId_example"
    const index: number = 56
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.updateNodeDrain(body, nodeId, index, xNomadToken, region, namespace, wait, stale, prefix, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("updateNodeEligibility", () => {
    const body: api.NodeUpdateEligibilityRequest = undefined
    const nodeId: string = "nodeId_example"
    const index: number = 56
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.updateNodeEligibility(body, nodeId, index, xNomadToken, region, namespace, wait, stale, prefix, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("updateNodePurge", () => {
    const nodeId: string = "nodeId_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.updateNodePurge(nodeId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("OperatorApi", () => {
  let instance: api.OperatorApi
  beforeEach(function() {
    instance = new api.OperatorApi(config)
  });

  test("deleteOperatorRaftPeer", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.deleteOperatorRaftPeer(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("getOperatorAutopilotConfiguration", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getOperatorAutopilotConfiguration(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getOperatorAutopilotHealth", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getOperatorAutopilotHealth(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getOperatorRaftConfiguration", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getOperatorRaftConfiguration(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getOperatorSchedulerConfiguration", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getOperatorSchedulerConfiguration(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postOperatorSchedulerConfiguration", () => {
    const body: api.SchedulerConfiguration = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postOperatorSchedulerConfiguration(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("putOperatorAutopilotConfiguration", () => {
    const body: api.AutopilotConfiguration = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.putOperatorAutopilotConfiguration(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("PluginsApi", () => {
  let instance: api.PluginsApi
  beforeEach(function() {
    instance = new api.PluginsApi(config)
  });

  test("getPluginCSI", () => {
    const pluginID: string = "pluginID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getPluginCSI(pluginID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getPlugins", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getPlugins(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("RegionsApi", () => {
  let instance: api.RegionsApi
  beforeEach(function() {
    instance = new api.RegionsApi(config)
  });

  test("getRegions", () => {
    return expect(instance.getRegions({})).resolves.toBe(null)
  })
})

describe("ScalingApi", () => {
  let instance: api.ScalingApi
  beforeEach(function() {
    instance = new api.ScalingApi(config)
  });

  test("getScalingPolicies", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getScalingPolicies(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getScalingPolicy", () => {
    const policyID: string = "policyID_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getScalingPolicy(policyID, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("SearchApi", () => {
  let instance: api.SearchApi
  beforeEach(function() {
    instance = new api.SearchApi(config)
  });

  test("getFuzzySearch", () => {
    const body: api.FuzzySearchRequest = undefined
    const index: number = 56
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getFuzzySearch(body, index, xNomadToken, region, namespace, wait, stale, prefix, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getSearch", () => {
    const body: api.SearchRequest = undefined
    const index: number = 56
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getSearch(body, index, xNomadToken, region, namespace, wait, stale, prefix, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("StatusApi", () => {
  let instance: api.StatusApi
  beforeEach(function() {
    instance = new api.StatusApi(config)
  });

  test("getStatusLeader", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getStatusLeader(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getStatusPeers", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getStatusPeers(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
})

describe("SystemApi", () => {
  let instance: api.SystemApi
  beforeEach(function() {
    instance = new api.SystemApi(config)
  });

  test("putSystemGC", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.putSystemGC(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
  test("putSystemReconcileSummaries", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.putSystemReconcileSummaries(region, namespace, xNomadToken, idempotencyToken, {})).resolves.toBe(null)
  })
})

describe("VariablesApi", () => {
  let instance: api.VariablesApi
  beforeEach(function() {
    instance = new api.VariablesApi(config)
  });

  test("deleteVariable", () => {
    const body: api.Variable = undefined
    const path: string = "path_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const cas: number = 56
    return expect(instance.deleteVariable(body, path, xNomadToken, region, namespace, idempotencyToken, cas, {})).resolves.toBe(null)
  })
  test("getVariableQuery", () => {
    const path: string = "path_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getVariableQuery(path, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getVariablesListRequest", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getVariablesListRequest(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("postVariable", () => {
    const body: api.Variable = undefined
    const path: string = "path_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const cas: number = 56
    return expect(instance.postVariable(body, path, xNomadToken, region, namespace, idempotencyToken, cas, {})).resolves.toBe(null)
  })
  test("putVariable", () => {
    const body: api.Variable = undefined
    const path: string = "path_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const cas: number = 56
    return expect(instance.putVariable(body, path, xNomadToken, region, namespace, idempotencyToken, cas, {})).resolves.toBe(null)
  })
})

describe("VolumesApi", () => {
  let instance: api.VolumesApi
  beforeEach(function() {
    instance = new api.VolumesApi(config)
  });

  test("createVolume", () => {
    const body: api.CSIVolumeCreateRequest = undefined
    const volumeId: string = "volumeId_example"
    const action: string = "action_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.createVolume(body, volumeId, action, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("deleteSnapshot", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const pluginId: string = "pluginId_example"
    const snapshotId: string = "snapshotId_example"
    return expect(instance.deleteSnapshot(region, namespace, xNomadToken, idempotencyToken, pluginId, snapshotId, {})).resolves.toBe(null)
  })
  test("deleteVolumeRegistration", () => {
    const volumeId: string = "volumeId_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const force: string = "force_example"
    return expect(instance.deleteVolumeRegistration(volumeId, region, namespace, xNomadToken, idempotencyToken, force, {})).resolves.toBe(null)
  })
  test("detachOrDeleteVolume", () => {
    const volumeId: string = "volumeId_example"
    const action: string = "action_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const xNomadToken: string = "xNomadToken_example"
    const idempotencyToken: string = "idempotencyToken_example"
    const node: string = "node_example"
    return expect(instance.detachOrDeleteVolume(volumeId, action, region, namespace, xNomadToken, idempotencyToken, node, {})).resolves.toBe(null)
  })
  test("getExternalVolumes", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const pluginId: string = "pluginId_example"
    return expect(instance.getExternalVolumes(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId, {})).resolves.toBe(null)
  })
  test("getSnapshots", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const pluginId: string = "pluginId_example"
    return expect(instance.getSnapshots(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, pluginId, {})).resolves.toBe(null)
  })
  test("getVolume", () => {
    const volumeId: string = "volumeId_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    return expect(instance.getVolume(volumeId, region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, {})).resolves.toBe(null)
  })
  test("getVolumes", () => {
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const index: number = 56
    const wait: string = "wait_example"
    const stale: string = "stale_example"
    const prefix: string = "prefix_example"
    const xNomadToken: string = "xNomadToken_example"
    const perPage: number = 56
    const nextToken: string = "nextToken_example"
    const nodeId: string = "nodeId_example"
    const pluginId: string = "pluginId_example"
    const type: string = "type_example"
    return expect(instance.getVolumes(region, namespace, index, wait, stale, prefix, xNomadToken, perPage, nextToken, nodeId, pluginId, type, {})).resolves.toBe(null)
  })
  test("postSnapshot", () => {
    const body: api.CSISnapshotCreateRequest = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postSnapshot(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postVolume", () => {
    const body: api.CSIVolumeRegisterRequest = undefined
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postVolume(body, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
  test("postVolumeRegistration", () => {
    const body: api.CSIVolumeRegisterRequest = undefined
    const volumeId: string = "volumeId_example"
    const xNomadToken: string = "xNomadToken_example"
    const region: string = "region_example"
    const namespace: string = "namespace_example"
    const idempotencyToken: string = "idempotencyToken_example"
    return expect(instance.postVolumeRegistration(body, volumeId, xNomadToken, region, namespace, idempotencyToken, {})).resolves.toBe(null)
  })
})

